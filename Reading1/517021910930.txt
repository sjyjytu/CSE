1. 什么是worse is better

   worse is better就是够用就好，不必过于追求完美。在软件开发/程序设计中，worse is better追求的是用简单快速的办法实现出应用，然后在此基础上进行完善，尽量保证软件/代码的正确性，一致性，和完整性。

2. worse is better的使用背景

   1. 什么情况下适合用worse is better
      1. 当工程非常庞大且容许多次迭代时，如unix系统，就适合先做一个简单版的，然后慢慢改进
      2. 当需求不确定，或经常变化时，就适合快速出原型，然后进行市场调研，接受用户反馈，再不断改进。
      3. 当问题比较简单或现实情况下提高某一性能很难很耗费成本或提高后现实意义不大时
   2. 什么情况下不适合用
      1. 当工程非常严谨，注重细节时。如迪拜帆船酒店的建造，如人造卫星的软件控制程序等，就必须考虑到所有情况。
      2. 当需求确定，变化不大时，不适用worse is better。

3. 我的亲生经历

   如暑假小学期时，我做过一个分享心情和照片的手机app，就比较适合用worse is better。在开发后端的api时，我每一个都设法想得很周到，比如考虑到用户乱点，考虑到用户网不好，考虑到恶意者的攻击，考虑到这样写可能性能不好，不利于并发，导致开发进度较慢。但实际情况是，既没有用户乱点，也没有用户网不好，更没有恶意用户的攻击，或者简单来说，根本就没有用户，本应该先快速写成app的原型，写更多更多的功能（老师觉得我们功能较少而没有给我们高分）；要是真的决定最后要发布app了，再根据用户数量的市场定位去完善安全、性能等。

   但是我们的做法也不是说不可取，至少大大减少了bug的数量，尽量避免了“写程序就是在写bug”。没有绝对的worse is better，也没有绝对的the right thing，just trade-off~